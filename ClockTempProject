/*
* Name: clock and temp project
* Author:  Andy Granfors
* Date: 2024-10-25
* Description: This project uses a DS3231 module to measure time and displays the current time on a 1306 OLED display.
* Additionally, it measures temperature using an analog temperature sensor module and displays a mapped value on a 9g servo motor.
* If the temperature is below a set threshold, the project activates a relay for further control actions.
*/

// Include Libraries
#include <Wire.h>
#include <RTClib.h>
#include <U8glib.h>
#include <Servo.h>
// Init constants
const int tmpPin = A0;
const int servoPin = 9;
const int relayPin = 8;
// Init global variables

// construct objects
Servo servo;
RTC_DS3231 rtc;
U8GLIB_SSD1306_128X64 oled(U8G_I2C_OPT_NONE);

void setup() {
  // init communication
  Wire.begin();
  rtc.begin();
  Serial.begin(9600);

  // Init Hardware
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  oled.setFont(u8g_font_6x10);
  servo.attach(servoPin);
  pinMode((relayPin), OUTPUT);
}

void loop() {
  float temperature = getTemp();
  Serial.println(temperature);
  oledWrite(getTime());
  servoWrite(temperature);
  if (temperature < 27) {
    relay();
  }
}



/*
*This function reads the time from a DS3231 module and packages the time as a String.
*Parameters: Void
*Returns: Time in hh:mm:ss format as a String
*/
String getTime() {
  DateTime now = rtc.now();
  return String(now.hour()) + ":" + String(now.minute()) + ":" + String(now.second());
}

/*
* This function reads an analog pin connected to an analog temperature sensor and calculates the corresponding temperature.
*Parameters: Void
*Returns: Temperature as a float in Celsius
*/
float getTemp() {

  int Vo;                        // Variable to store analog value
  float R1 = 10000;              // Fixed resistor value (10k ohms) on the board
  float logR2, R2, T;            // Intermediate variables for calculation
  float c1 = 0.001129148, c2 = 0.000234125, c3 = 0.0000000876741;  // Steinhart-Hart coefficients for thermistor

  Vo = analogRead(tmpPin);       // Read analog value from temperature sensor
  R2 = R1 * (1023.0 / (float)Vo - 1.0);  // Calculate thermistor resistance
  logR2 = log(R2);               // Calculate log of resistance
  T = (1.0 / (c1 + c2 * logR2 + c3 * logR2 * logR2 * logR2));  // Calculate temperature in Kelvin using Steinhart-Hart equation
  T = T - 273.15;                // Convert Kelvin to Celsius

  return T;
}

/*
* This function takes a String and draws it to the OLED display.
*Parameters: - text: String to write to the display
*Returns: void
*/
void oledWrite(String text) {
  oled.firstPage();
  do {
    oled.drawStr(10, 30, text.c_str());
  } while (oled.nextPage());
}
/*
* Takes a temperature value and maps it to the corresponding angle on a servo motor.
*Parameters: - value: temperature in Celsius
*Returns: void
*/
void servoWrite(float value) {
  int angle = map(value, 15, 30, 0, 180);
  servo.write(angle);
}
/*
* Activates the relay with a brief delay to simulate a pulse.
*Parameters: Void
*Returns: void
*/
void relay(){
  digitalWrite((relayPin), HIGH);
  delay(10);
  digitalWrite((relayPin), LOW);
  delay(50);
}
